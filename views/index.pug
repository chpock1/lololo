extends layout
block content
    .blockKontent
        h1 E.V.A
        p.logo evaluator
        .borderRoom
            div#console
            .anilizeImage
                img.image#img(crossorigin)
            input.inpDownloadImg#inputFile(type="file" name="picField" size="24" onchange="test(event)" alt="")
            .textOutput
                p#text
            .textOutput
                p#color
    script.
        let neuralCats=[0,0,0,0]
        let net;
        function test(event){
            document.getElementById('text').textContent=''
            document.getElementById('color').textContent=''
            var selectedFile = event.target.files[0];
            var reader = new FileReader();
            var imgtag = document.getElementById("img");
            imgtag.title = selectedFile.name;
            reader.onload = function (event) {
                imgtag.src = event.target.result;
            };
            reader.readAsDataURL(selectedFile);
            app(selectedFile)
        };
        async function app(selectedFile) {
            let  textId = document.getElementById('text')
            let colorId=document.getElementById('color')
            net = await mobilenet.load();
            const imgEl = document.getElementById('img');
            const result = await net.classify(imgEl, 4);
            neuralCats=[0,0,0,0]
            result.forEach(type => {if (type.className.includes('prison') || type.className.includes('sliding door') || type.className.includes('mosquito')|| type.className.includes('dust')) neuralCats[3]=neuralCats[3]+type.probability; else if(type.className.includes('theater') || type.className.includes('studio couch')|| type.className.includes('studio couch')|| type.className.includes('restaurant')) neuralCats[0]=neuralCats[0]+type.probability; else if ( type.className.includes('bathtub') || type.className.includes('radiator') || type.className.includes('welcome mat') || type.className.includes('doormat')|| type.className.includes('paper')|| type.className.includes('mousetrap')|| type.className.includes('carton')||type.className.includes('closet')||type.className.includes('bookcase')) neuralCats[2] = neuralCats[2] + type.probability; else if (type.className.includes('microwave') || type.className.includes('television') || type.className.includes('dishwashing') || type.className.includes('shower') || type.className.includes('board')|| type.className.includes('cabinet')|| type.className.includes('prayer')|| type.className.includes('lavabo')) neuralCats[1] = neuralCats[1] + type.probability})
            if(neuralCats[0]>0&&neuralCats[3]>0) {neuralCats[1]=neuralCats[1]+neuralCats[0]; neuralCats[2] = neuralCats[2] + neuralCats[3];}
            if(neuralCats[0]>0&&neuralCats[3]===0&&neuralCats[2]>0) neuralCats[1]=neuralCats[1]+neuralCats[2]+neuralCats[0]
            if(neuralCats[3] > 0 && neuralCats[0] === 0 && neuralCats[1] > 0) neuralCats[2] = neuralCats[1] + neuralCats[2] + neuralCats[3]
            console.log(neuralCats[0],neuralCats[1],neuralCats[2],neuralCats[3])
            for(let i=0;i<4;i++){
                for (let k = 0; k < 4; k++) {
                    if(neuralCats[i]<neuralCats[k]){

                         if (neuralCats[k] === neuralCats[0]) {
                             textId.textContent='люкс'
                        }
                         if (neuralCats[k] === neuralCats[1] && neuralCats[k] > neuralCats[0]) {
                             textId.textContent='стандартный ремонт'
                        }
                         if (neuralCats[k] === neuralCats[2] && neuralCats[k] > neuralCats[1]) {
                             textId.textContent='требует косметического ремонта'
                        } if(neuralCats[k] === neuralCats[3]){
                            textId.textContent='без отделки'
                        }
                        if (neuralCats[0] === neuralCats[1] && neuralCats[2] === neuralCats[3]) {
                            if(neuralCats[0]>neuralCats[2]){
                                textId.textContent='люкс или стандартный ремонт'
                            }
                            else{
                                textId.textContent='без отделки или требует ремонта '
                            }
                        }
                    }
                }

            }
            var formData = new FormData();
            formData.append("file", selectedFile);
            let styleColor=[]
            $.ajax({
                url: "http://192.168.1.101:3003/colorsImg",
                type: "POST",
                data: formData,
                processData: false,
                contentType: false,
                success: function (res) {
                    $.post("http://192.168.1.101:3003/colors", {name: res.name}, resTwo => {
                         resTwo.forEach(color=>{
                             if(styleColor.indexOf(color.family)===-1&&color.family!=='neutral') styleColor.push(color.family)
                         })
                        if(styleColor.length>3) colorId.textContent='E.V.A определила, что используемая политра цветов плохо сочетается в данном помещении'
                        else {
                           switch (JSON.stringify(styleColor).sort) {
                                case JSON.stringify(['green', 'blue']).sort:
                                    colorId.textContent='E.V.A определила, что  используемая политра цветов хорошо сочетается в данном помещении'
                                    break
                                case JSON.stringify(['light', 'green']).sort:
                                    colorId.textContent='E.V.A определила, что  используемая политра цветов хорошо сочетается в данном помещении'
                                    break
                                case JSON.stringify(['pink', 'green']).sort:
                                    colorId.textContent='E.V.A определила, что  используемая политра цветов хорошо сочетается в данном помещении'
                                    break
                                case JSON.stringify(['light','brown']).sort:
                                    colorId.textContent='E.V.A определила, что  используемая политра цветов хорошо сочетается в данном помещении'
                                    break
                                case JSON.stringify(['purple', 'blue', 'orange']).sort:
                                    colorId.textContent='E.V.A определила, что  используемая политра цветов хорошо сочетается в данном помещении'
                                    break
                                case JSON.stringify(['purple', 'brown', 'pink']).sort:
                                    colorId.textContent='E.V.A определила, что  используемая политра цветов хорошо сочетается в данном помещении'
                                    break
                                case JSON.stringify(['pink', 'blue', 'orange']).sort:
                                    colorId.textContent='E.V.A определила, что  используемая политра цветов хорошо сочетается в данном помещении'
                                    break
                                case JSON.stringify(['yellow', 'grey']).sort:
                                    colorId.textContent='E.V.A определила, что  используемая политра цветов хорошо сочетается в данном помещении'
                                    break
                                case JSON.stringify(['blue', 'grey', 'yellow']).sort:
                                    colorId.textContent='E.V.A определила, что  используемая политра цветов хорошо сочетается в данном помещении'
                                    break
                                case JSON.stringify(['dark', 'light']).sort:
                                    colorId.textContent='E.V.A определила, что  используемая политра цветов хорошо сочетается в данном помещении'
                                    break
                            }
                        }
                    });
                }
            })
        }
